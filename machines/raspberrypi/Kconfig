# SPDX-License-Identifier: LGPL-2.1-only
# SPDX-FileCopyrightText: Copyright 2024 GaÃ«l PORTAY

config IS_RASPBERRYPI
	bool
	default y if IS_MACHINE_RASPBERRYPI3_64 || \
		     IS_MACHINE_RASPBERRYPI4_64 || \
		     IS_MACHINE_RASPBERRYPI5

menu "Raspberry Pi"
	depends on IS_RASPBERRYPI

choice
	prompt "Bootloader"
	default IS_RASPBERRYPI_BOOTLOADER_RASPBERRYPI_FIRMWARE

config IS_RASPBERRYPI_BOOTLOADER_RASPBERRYPI_FIRMWARE
	bool "Raspberry Pi Firmware"
	help
	  https://www.raspberrypi.com/documentation/computers/config_txt.html

config IS_RASPBERRYPI_BOOTLOADER_U_BOOT
	bool "U-Boot"
	depends on !IS_MACHINE_RASPBERRYPI5
	help
	  https://docs.u-boot.org/en/latest/

endchoice

config KAS_INCLUDE_IS_RASPBERRYPI_BOOTLOADER_U_BOOT
	string
	depends on IS_RASPBERRYPI_BOOTLOADER_U_BOOT
	default "machines/raspberrypi/use-u-boot.yaml"

config HAS_RASPBERRYPI_FIRMWARE_ENABLE_UART
	bool "Enable UART"
	depends on IS_RASPBERRYPI_BOOTLOADER_RASPBERRYPI_FIRMWARE
	help
	  Requests that the kernel creates a serial console, accessible
	  using GPIOs 14 and 15 (pins 8 and 10 on the 40-pin header).

	  https://www.raspberrypi.com/documentation/computers/config_txt.html#enable_uart

config KAS_INCLUDE_RASPBERRYPI_FIRMWARE_ENABLE_UART
	string
	depends on HAS_RASPBERRYPI_FIRMWARE_ENABLE_UART
	default "machines/raspberrypi/enable-uart.yaml"

config HAS_RASPBERRYPI_FIRMWARE_ENABLE_TRYBOOT
	bool "Enable tryboot"
	depends on IS_RASPBERRYPI_BOOTLOADER_RASPBERRYPI_FIRMWARE
	select HAS_LAYER_META_RAUC
	select HAS_LAYER_META_RAUC_COMMUNITY
	select HAS_LAYER_THIS
	select HAS_LAYER_THIS_META_RAUC_RASPBERRYPI_FIRMWARE
	help
	  The bootloader/firmware provide a one-shot flag which, if set,
	  is cleared but causes tryboot.txt to be loaded instead of
	  config.txt. This alternate config would specify the pending OS
	  update firmware, cmdline, kernel and os_prefix parameters.
	  Since the flag is cleared before starting the firmware, a
	  crash or reset will cause the original config.txt file to be
	  loaded on the next reboot.

	  https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#fail-safe-os-updates-tryboot

config KAS_INCLUDE_RASPBERRYPI_FIRMWARE_ENABLE_TRYBOOT
	string
	depends on HAS_RASPBERRYPI_FIRMWARE_ENABLE_TRYBOOT
	default "machines/raspberrypi/enable-tryboot.yaml"

config HAS_RASPBERRYPI_USE_RUNQEMU
	bool "Use Wic"
	select HAS_IMAGE_FSTYPES_WIC
	help
	  Generate an Image using an Existing Kickstart File.

	  https://docs.yoctoproject.org/dev/dev-manual/wic.html
	  https://docs.yoctoproject.org/dev/ref-manual/kickstart.html#openembedded-kickstart-wks-reference

config HAS_RASPBERRYPI_USE_RUNQEMU
	bool "Use runqemu"
	depends on IS_MACHINE_RASPBERRYPI3_64 || IS_MACHINE_RASPBERRYPI4_64
	select HAS_IMAGE_CLASSES_QEMUBOOT
	select HAS_IMAGE_FSTYPES_WIC
	help
	  Within the context of the Yocto Project, QEMU is an emulator
	  and virtualization machine that allows you to run a complete
	  image you have built using the Yocto Project as just another
	  task on your build system. QEMU is useful for running and
	  testing images and applications on supported Yocto Project
	  architectures without having actual hardware.

	  https://docs.yoctoproject.org/dev-manual/qemu.html

	  For official information and documentation on QEMU in general,
	  see the following references:

	  https://wiki.qemu.org/Main_Page
	  https://wiki.qemu.org/Documentation

config KAS_INCLUDE_RASPBERRYPI_USE_RUNQEMU
	string
	depends on HAS_RASPBERRYPI_USE_RUNQEMU
	default "machines/raspberrypi/use-runqemu-raspi3b.yaml" \
		if IS_MACHINE_RASPBERRYPI3_64
	default "machines/raspberrypi/use-runqemu-raspi4b.yaml" \
		if IS_MACHINE_RASPBERRYPI4_64

endmenu
